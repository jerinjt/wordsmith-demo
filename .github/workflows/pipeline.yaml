name: CI-CD-Dev

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches:
      - main

env:
  OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
  OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
  OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
  OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
  OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}

jobs:
  unit-testing:
    name: Unit Testing
    steps:
      - name: Run unit testing
        run: echo " Run Unit testing"

  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -f ./api/pom.xml -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=demo-project -Dsonar.projectName='demo-project'
      - name: Check SonarQube Quality Gate
        run: |
          STATUS=$(curl -s "http://129.150.35.183:9000/api/project_badges/measure?project=demo-project&metric=alert_status&token=sqb_ce32b49127641027d6b263bf6d5c1e155bad8d60" | grep -oP '(?<=<text x="103" y="14" textLength="39">)[^<]+')
          if [ "$STATUS" != "passed" ]; then
            echo "Quality gate failed!"
            exit 1
          else
            echo "Quality gate passed!"
          fi

  push_to_registry:
    if: ${{ github.event_name != 'pull_request' }}
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: build
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for API Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: shivin8080/demo-api

      - name: Build and push Docker image API
        id: push
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Extract metadata (tags, labels) for Web Docker
        id: web
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: shivin8080/demo-web

      - name: Build and push Docker image Web
        id: push-web
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: ./web
          file: ./web/Dockerfile
          push: true
          tags: ${{ steps.web.outputs.tags }}
          labels: ${{ steps.web.outputs.labels }}

  install-kubectl:
    if: ${{ github.event_name != 'pull_request' }}
    name: Install Kubectl for OKE
    runs-on: ubuntu-latest
    needs: push_to_registry
    steps:
      - name: Configure Kubectl
        uses: oracle-actions/configure-kubectl-oke@v1.5.0
        id: test-configure-kubectl-oke-action
        with:
          cluster: ${{ secrets.OKE_CLUSTER_OCID }}

      - name: Run Kubectl
        run: kubectl get nodes -A

      - name: Check out the repo
        uses: actions/checkout@v4
      
      - name: Helm deploy
        run: helm upgrade wordsmith-dev ./Helm/wordsmith --namespace ws-dev --install --create-namespace
